Problem - Design duck pond simulation game with different flying and quacking behaviour

Take away points
	1. Take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affecting those that don't.

	2. Program to an interface, not an implementation.
		Program to a supertype. The declared type of the variable should be a supertype, usually an abstract class or interface, so that the objects assigned to those variables can be of any type of any concrete implementation of the supertype, which means the class declaring them doesn't have to know about the actual object type.

